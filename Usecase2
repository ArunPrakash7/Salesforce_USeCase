<template>
    <lightning-button label="Approve Medical Director" onclick={handleClick} variant="brand"></lightning-button>
</template>
import { LightningElement } from 'lwc';

export default class ApproveMedicalDirectorButton extends LightningElement {
    handleClick() {
        const event = new CustomEvent('openmodal');
        this.dispatchEvent(event);
    }
}
public class CaseHandler {
    @AuraEnabled
    public static void updateCaseStatus(List<Id> caseIds, String status) {
        List<Case> casesToUpdate = [SELECT Id, Status FROM Case WHERE Id IN :caseIds];
        
        for (Case c : casesToUpdate) {
            c.Status = status;
        }
        
        update casesToUpdate;
    }
}
public class DirectorQueueHandler {
    @AuraEnabled(cacheable=true)
    public static List<Case> getDirectorQueueCases() {
        return [SELECT Id, Subject, Status FROM Case WHERE RecordTypeId = :Schema.SObjectType.Case.RecordTypeInfosByDeveloperName.get('Director').RecordTypeId];
    }
}
<template>
    <lightning-card title="Cases in Director Queue" icon-name="standard:case">
        <lightning-layout>
            <template if:true={cases}>
                <template for:each={cases} for:item="caseRec">
                    <div key={caseRec.Id}>
                        <lightning-input type="checkbox" label={caseRec.Subject} value={caseRec.Id} checked={selectedCases.includes(caseRec.Id)} onchange={handleCheckboxChange}></lightning-input>
                    </div>
                </template>
                <div style="margin-top: 10px;">
                    <lightning-radio-group name="status" options={statusOptions} value={selectedStatus} onchange={handleStatusChange}></lightning-radio-group>
                </div>
                <div style="margin-top: 10px;">
                    <lightning-button label="Next" variant="brand" onclick={handleNext}></lightning-button>
                </div>
            </template>
            <template if:false={cases}>
                <p>No cases found in the Director Queue.</p>
            </template>
        </lightning-layout>
    </lightning-card>
</template>
import { LightningElement, wire } from 'lwc';
import getDirectorQueueCases from '@salesforce/apex/DirectorQueueHandler.getDirectorQueueCases';
import updateCaseStatus from '@salesforce/apex/CaseHandler.updateCaseStatus';

export default class DirectorQueueCases extends LightningElement {
    cases;
    selectedCases = [];
    selectedStatus;
    statusOptions = [{ label: 'Approved', value: 'Approved' }, { label: 'Cancelled', value: 'Cancelled' }];

    @wire(getDirectorQueueCases)
    wiredCases({ error, data }) {
        if (data) {
            this.cases = data;
        } else if (error) {
            console.error('Error loading cases:', error);
        }
    }

    handleCheckboxChange(event) {
        const caseId = event.target.value;
        if (event.target.checked) {
            this.selectedCases.push(caseId);
        } else {
            this.selectedCases = this.selectedCases.filter(id => id !== caseId);
        }
    }

    handleStatusChange(event) {
        this.selectedStatus = event.detail.value;
    }

    handleNext() {
        if (this.selectedCases.length > 0 && this.selectedStatus) {
            updateCaseStatus({ caseIds: this.selectedCases, status: this.selectedStatus })
                .then(() => {
                    // Handle success message or any other action
                    console.log('Cases updated successfully.');
                })
                .catch(error => {
                    console.error('Error updating cases:', error);
                });
        }
    }
}
