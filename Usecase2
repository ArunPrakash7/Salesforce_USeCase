<template>
     <lightning-datatable data={data} columns={columns} key-field="id"></lightning-datatable> 
    <p>Imperative</p> 
     <lightning-datatable data={accountRecordsList} columns={columns} key-field="id"></lightning-datatable>
    <lightning-datatable>
            key-field="Id"
            data={cases}
            columns={columns}
            hide-checkbox-column="true"
            
        </lightning-datatable> 
        <lightning-button variant="brand" label="Next" title="Primary action" onclick={handleClick} class="slds-m-left_x-small"></lightning-button> 
</template>
import { LightningElement,track,wire } from 'lwc';
import getCases from '@salesforce/apex/CaseController.getCases';
//import updateCaseStatus from '@salesforce/apex/CaseController.updateCaseStatus';
export default class CaseRecordNew extends LightningElement {
    @track data;
   // @track accountRecordsList;
    @track columns = [
        { label: 'CaseNumber', fieldName: 'CaseNumber', type: 'text' },        
        { label: 'Origin', fieldName: 'Origin' },
        { label: 'Status', fieldName: 'Status' },       
    ];   
         @track cases = [];
         @track columns = columns;
         @track selectedRows = [];
         @track showRadioButtons = false;
         @track statusOptions = [{ label: 'Approved', value: 'Approved' }, { label: 'Cancelled', value: 'Cancelled' }];
         @track selectedStatus = '';

    @wire (getCases) caseRecords({error,data}){
        if(data){
            this.data = data;            
        }
        else if (error){
            this.data  = undefined;
        }
    }
    connectedCallback(){
        getAccounts()
            .then(result=>{
                this.accountRecordsList = result;
            })
            .catch(error=>{
                this.accountRecordsList = undefined;
            });
    }
    handleRowSelection(event) {
    this.selectedRows = event.detail.selectedRows;
             this.showRadioButtons = this.selectedRows.length > 0;
         }

    handleStatusChange(event) {
             this.selectedStatus = event.detail.value;
         }

         handleUpdateStatus() {
             const caseIds = this.selectedRows.map(row => row.Id);
             updateCaseStatus({ caseIds: caseIds, newStatus: this.selectedStatus })
                 .then(result => {
                      Handle success
                 })
                 .catch(error => {
                      Handle error
                 });
         }
}
caseRecordNew.js:49,28 : LWC1503: Parsing error: Missing semicolon. (49:28): Source
