<template>
    <lightning-card title="Cases in Director Queue" icon-name="standard:case">
        <lightning-datatable
            key-field="Id"
            data={cases}
            columns={columns}
            selected-rows={selectedRows}
            onrowselection={handleRowSelection}
            hide-checkbox-column
        ></lightning-datatable>
        <template if:true={selectedRows.length}>
            <div style="margin-top: 20px;">
                <lightning-radio-group name="status" options={statusOptions} value={selectedStatus} onchange={handleStatusChange}></lightning-radio-group>
            </div>
            <div style="margin-top: 20px;">
                <lightning-button label="Next" variant="brand" onclick={handleNext}></lightning-button>
            </div>
        </template>
        <template if:false={selectedRows.length}>
            <p>No cases selected.</p>
        </template>
    </lightning-card>
</template>
 import { LightningElement, wire } from 'lwc';
import { refreshApex } from '@salesforce/apex';
import getDirectorQueueCases from '@salesforce/apex/DirectorQueueHandler.getDirectorQueueCases';
import updateCaseStatus from '@salesforce/apex/CaseHandler.updateCaseStatus';

const columns = [
    { label: 'Subject', fieldName: 'Subject', type: 'text' },
    { label: 'Status', fieldName: 'Status', type: 'text' }
];

export default class CaseStatusUpdate extends LightningElement {
    cases = [];
    columns = columns;
    selectedRows = [];
    selectedStatus;
    statusOptions = [{ label: 'Approved', value: 'Approved' }, { label: 'Cancelled', value: 'Cancelled' }];

    @wire(getDirectorQueueCases)
    wiredCases({ error, data }) {
        if (data) {
            this.cases = data.map(item => ({ ...item, selected: false }));
        } else if (error) {
            console.error('Error loading cases:', error);
        }
    }

    handleRowSelection(event) {
        this.selectedRows = event.detail.selectedRows;
    }

    handleStatusChange(event) {
        this.selectedStatus = event.detail.value;
    }

    handleNext() {
        if (this.selectedRows.length > 0 && this.selectedStatus) {
            const caseIds = this.selectedRows.map(row => row.Id);
            updateCaseStatus({ caseIds: caseIds, status: this.selectedStatus })
                .then(() => {
                    // Handle success message or any other action
                    console.log('Cases updated successfully.');
                    // Refresh the datatable to reflect the updated status
                    return refreshApex(this.wiredCases);
                })
                .catch(error => {
                    console.error('Error updating cases:', error);
                });
        }
    }
}
