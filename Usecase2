@isTest
private class AddressTriggerTest {

    @isTest
    static void testHandleUniqueShippingAddress() {
        // Create test accounts (hospitals)
        Account hospital1 = new Account(Name = 'Hospital 1');
        Account hospital2 = new Account(Name = 'Hospital 2');
        insert new List<Account>{hospital1, hospital2};

        // Create initial addresses for these hospitals
        Schema.Address address1 = new Schema.Address(
            ACCCO_RelatedAccount__c = hospital1.Id,
            CTCCO_ShippingAddress__c = true,
            Street = '123 Main St',
            City = 'City',
            StateCode = 'CA',
            PostalCode = '12345',
            CountryCode = 'US'
        );
        Schema.Address address2 = new Schema.Address(
            ACCCO_RelatedAccount__c = hospital2.Id,
            CTCCO_ShippingAddress__c = false,
            Street = '456 Elm St',
            City = 'City',
            StateCode = 'CA',
            PostalCode = '67890',
            CountryCode = 'US'
        );

        insert new List<Schema.Address>{address1, address2};

        // Test case: Insert a new shipping address for an account that already has one
        Schema.Address address3 = new Schema.Address(
            ACCCO_RelatedAccount__c = hospital1.Id,
            CTCCO_ShippingAddress__c = true,
            Street = '789 Pine St',
            City = 'City',
            StateCode = 'CA',
            PostalCode = '11111',
            CountryCode = 'US'
        );

        Test.startTest();
        try {
            insert address3;
            System.assert(false, 'Expected a DMLException for duplicate shipping address');
        } catch (DmlException e) {
            System.assert(e.getMessage().contains(System.Label.CUSIT_ShippingAddressCanBeOnlyOne), 'Error message did not match');
        }
        Test.stopTest();

        // Test case: Update an existing address to a shipping address when another shipping address exists
        address2.CTCCO_ShippingAddress__c = true;

        Test.startTest();
        try {
            update address2;
            System.assert(false, 'Expected a DMLException for updating to shipping address');
        } catch (DmlException e) {
            System.assert(e.getMessage().contains(System.Label.CUSIT_ShippingAddressCanBeOnlyOne2), 'Error message did not match');
        }
        Test.stopTest();

        // Test case: Update an address from shipping to non-shipping when another address is available
        address1.CTCCO_ShippingAddress__c = false;

        Test.startTest();
        try {
            update address1;
            System.assert(false, 'Expected a DMLException for changing shipping address to non-shipping');
        } catch (DmlException e) {
            System.assert(e.getMessage().contains(System.Label.CUSIT_ShippingAddressCannotBeChanged), 'Error message did not match');
        }
        Test.stopTest();
    }
}