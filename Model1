@isTest
public class RewardsCalloutServiceTest {
    @isTest static void testSubmitUsersForRewardCallout() {
        // Mock for successful callout
        Test.setMock(HttpCalloutMock.class, new RewardsCalloutServiceMock());

        // Create test data for Wellness Journey
        List<Wellness_Journey__c> journeys = new List<Wellness_Journey__c>();
        User testUser = [SELECT Id, Name, Username, Email FROM User WHERE Id = :UserInfo.getUserId()];

        for (Integer i = 0; i < 12; i++) {
            Wellness_Journey__c journey = new Wellness_Journey__c(
                OwnerId = testUser.Id
            );
            journeys.add(journey);
        }
        insert journeys;

        Test.startTest();
        // Execute batch that triggers the callout
        Database.executeBatch(new WellnessJourneyRewardsBatch());
        Test.stopTest();

        // Test successful callout
        Integer statusCode = RewardsCalloutService.submitUsersForRewardCallout(JSON.serialize(journeys));
        System.assertEquals(200, statusCode, 'The HTTP status code should be 200');

        // Test callout failure scenario (500 error)
        Test.setMock(HttpCalloutMock.class, new RewardsCalloutServiceErrorMock());
        Integer errorStatusCode = RewardsCalloutService.submitUsersForRewardCallout(JSON.serialize(journeys));
        System.assertEquals(500, errorStatusCode, 'The HTTP status code should be 500 in case of error');

        // Simulate an exception by using an invalid endpoint
        Test.setMock(HttpCalloutMock.class, new RewardsCalloutServiceExceptionMock());
        Integer exceptionStatusCode = RewardsCalloutService.submitUsersForRewardCallout(JSON.serialize(journeys));
        System.assertEquals(500, exceptionStatusCode, 'The HTTP status code should be 500 in case of exception');
    }
}

@isTest
global class RewardsCalloutServiceMock implements HttpCalloutMock {
    global HTTPResponse respond(HTTPRequest req) {
        HttpResponse res = new HttpResponse();
        res.setHeader('Content-Type', 'application/json');
        res.setBody('{"status":"success"}');
        res.setStatusCode(200);
        return res;
    }
}

@isTest
global class RewardsCalloutServiceErrorMock implements HttpCalloutMock {
    global HTTPResponse respond(HTTPRequest req) {
        HttpResponse res = new HttpResponse();
        res.setHeader('Content-Type', 'application/json');
        res.setBody('{"status":"error"}');
        res.setStatusCode(500); // Simulate an error response
        return res;
    }
}

// This Mock simulates an exception
@isTest
global class RewardsCalloutServiceExceptionMock implements HttpCalloutMock {
    global HTTPResponse respond(HTTPRequest req) {
        // Simulate an exception by throwing one here
        throw new CalloutException('Simulated callout exception');
    }
}