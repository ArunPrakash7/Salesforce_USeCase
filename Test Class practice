@isTest
public class CreateSalaryRecordTest {
    @testSetup
    static void setupData() {
        Test.startTest();
        Account testAccount = new Account(Name = 'Test Account');
        insert testAccount;
        Summary__c summary1 = new Summary__c(
            Name = 'Summary 1',
            Account__c = testAccount.Id,
            Type__c = 'Programmer Analyst',
            Years_of_Experience__c= 1
        );
        Summary__c summary2 = new Summary__c(
            Name = 'Summary 2',
            Account__c = testAccount.Id,
            Type__c = 'Associate',
            Years_of_Experience__c = 3
        );
        Summary__c summary3 = new Summary__c(
            Name = 'Summary 3',
            Account__c = testAccount.Id,
            Type__c = 'Manager',
            Years_of_Experience__c = 5
        );
        insert new List<Summary__c> {summary1, summary2, summary3};
        Test.stopTest();
    }
     @isTest
     static void testSalaryCreation() {
        Test.startTest();
        List<Salary__c> salaries = [SELECT Name, Salary__c, Years_of_Experience__c, Designation__c FROM Salary__c];  
        Test.stopTest();
        System.assertEquals(3, salaries.size(), 'There should be 3 salary records created.');
        Salary__c traineeSalary = [SELECT Salary__c FROM Salary__c WHERE Designation__c = 'Programmer Analyst' LIMIT 1];
        System.assertEquals(25000, traineeSalary.Salary__c, 'Trainee should have salary 25000.');
        Salary__c associateSalary = [SELECT Salary__c FROM Salary__c WHERE Designation__c = 'Associate' LIMIT 1];
        System.assertEquals(40000, associateSalary.Salary__c, 'Associate should have salary 40000.');
        Salary__c managerSalary = [SELECT Salary__c FROM Salary__c WHERE Designation__c = 'Manager' LIMIT 1];
        System.assertEquals(60000, managerSalary.Salary__c, 'Manager should have salary 60000.');
    }
    @isTest
    static void testNullValues() {
        Test.startTest();
        Summary__c summary = new Summary__c(
            Name = 'Summary Null',
            Years_of_Experience__c = 2
        );
        insert summary;
        Test.stopTest();
        List<Salary__c> salaries = [SELECT Id FROM Salary__c WHERE Designation__c = null];
        System.assertEquals(0, salaries.size(), 'No Salary record should be created for null Account or Type.');
    }
}
trigger CreateSalaryRecord on Summary__c (After insert) {
    List<Salary__c> salaryRecords= new List<Salary__c>();
    for(Summary__c summary: Trigger.new){
        if(summary.Account__c!=null && summary.Type__c!=null){
            Account acc=[SELECT Name FROM Account WHERE id=: summary.Account__c LIMIT 1];
            Salary__c newSalary= new Salary__c();
            newSalary.Name=acc.Name;
            newSalary.Years_Of_Experience__c=summary.Years_Of_Experience__c;
            newSalary.Designation__c=summary.Type__c;
            if(summary.Type__c=='Programmer Analyst'){
                newSalary.Salary__c=25000;
            }
            else if(summary.Type__c=='Associate'){
                newSalary.Salary__c=40000;
            }
            else if(summary.Type__c=='Manager'){
                newSalary.Salary__c=60000;
            }
            else{
                newSalary.Salary__c=0;                
            }
            salaryRecords.add(newSalary);
        }
    }
    if(!salaryRecords.isEmpty()){
        insert salaryRecords;
    }
}
